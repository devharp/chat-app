<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <!-- MDB -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/4.1.0/mdb.min.css" rel="stylesheet" />
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        html,
        body {
            height: 100%;
            width: 100%;
        }
        
        body {
            font-family: sans-serif;
        }
        
        #videos .video {
            height: 100px;
            width: 100px;
            background-color: black;
        }
    </style>
</head>

<body>
    <div class="" id="app">
        <div class="" id="videos">
            <video class="video" id="my-vid" autoplay></video>
        </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.5.1/socket.io.js"></script>
    <script src="https://unpkg.com/peerjs@1.4.5/dist/peerjs.min.js"></script>
    <script>
        class IceServers {
            constructor() {
                this.list = [{
                    url: 'stun:stun.l.google.com:19302'
                }, {
                    url: 'stun:stun1.l.google.com:19302'
                }, {
                    url: 'stun:stun2.l.google.com:19302'
                }, {
                    url: 'stun:stun3.l.google.com:19302'
                }, {
                    url: 'stun:stun4.l.google.com:19302'
                }, {
                    url: 'turn:numb.viagenie.ca',
                    credential: 'muazkh',
                    username: 'webrtc@live.com'
                }, {
                    url: 'turn:192.158.29.39:3478?transport=udp',
                    credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',
                    username: '28224511:1379330808'
                }, {
                    url: 'turn:192.158.29.39:3478?transport=tcp',
                    credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',
                    username: '28224511:1379330808'
                }, {
                    url: 'turn:turn.bistri.com:80',
                    credential: 'homeo',
                    username: 'homeo'
                }]
            }

            getList() {
                return this.list;
            }
        }
    </script>
    <script>
        const username = '<%= username %>';
        const password = '<%= password %>';
        const link = window.location.pathname.replace('/', '');

        const peer = new Peer({
            config: {
                'iceServers': new IceServers().getList()
            }
        });
        const socket = io();
        socket.on('connect', () => {
            console.log('socket connected to the server');
            peer.on('open', (conn) => {
                console.log('here: ', peer.id);
                try {
                    navigator.mediaDevices.getUserMedia({
                            audio: false,
                            video: {
                                height: 100,
                                width: 100
                            }
                        })
                        .then(stream => {
                            init(stream);
                            document.getElementById('my-vid').srcObject = stream;
                        })
                        .catch(err => {
                            console.error(err)
                        });
                } catch (error) {
                    console.error(error);
                }
            });
        });


        function init(stream) {
            socket.emit('add-to-session', {
                link,
                username,
                password,
                peer: peer.id
            });

            socket.on('update-peers', () => {
                console.log('updated peers list');
                socket.emit('get-peers', {
                    link
                });
            });
            socket.on('peers-list', payload => {

                console.log('peers list here: ');
                console.log(payload);
                const videos = document.getElementById('videos');

                const videos_list = videos.getElementsByClassName('video');
                let oldpeers = [];
                for (let i = 0; i < videos_list.length; i++) {
                    const e = videos_list[i];
                    const id = e.getAttribute('id');
                    if (id === 'my-vid') {
                        oldpeers.push(id);
                    } else {
                        oldpeers.push(id);
                    }
                }

                let addpeers = [];
                let delpeers = [];

                for (let i = 0; i < payload.length; i++) {
                    let found = false;
                    for (let j = 0; j < oldpeers.length; j++) {
                        if (payload[i] === oldpeers[j]) {
                            found = true;
                            break;
                        }
                    }
                    if (!found) {
                        addpeers.push(payload[i]);
                    }
                }

                for (let i = 0; i < oldpeers.length; i++) {
                    let found = false;
                    for (let j = 0; j < payload.length; j++) {
                        if (oldpeers[i] === payload[j]) {
                            found = true;
                            break;
                        }
                    }
                    if (!found) {
                        if (oldpeers[i] !== undefined) {
                            if (oldpeers[i] !== peer.id && oldpeers[i] !== 'my-vid') {
                                delpeers.push(oldpeers[i]);
                            }
                        }
                    }
                }

                if (addpeers.length > 0) {
                    for (let i = 0; i < addpeers.length; i++) {
                        const e = addpeers[i];
                        let videlem = document.createElement('video');
                        videlem.setAttribute('id', e);
                        videlem.setAttribute('class', 'video');
                        if (e !== peer.id) {
                            const calle = peer.call(e, stream);
                            peer.on('call', call => {
                                call.answer(stream);
                                call.on('stream', rmstream => {
                                    const id = call.peer;
                                    const rmvelem = document.getElementById(call.peer);
                                    rmvelem.srcObject = rmstream;
                                    rmvelem.onloadeddata = (eee) => {
                                        rmvelem.play();
                                    }
                                });
                            });
                            videos.appendChild(videlem);
                        }
                    }
                }

                if (delpeers.length > 0) {
                    console.log('peers to deleted: ', delpeers);
                    for (let i = 0; i < delpeers.length; i++) {
                        const e = delpeers[i];
                        const f = document.getElementById(e);
                        if (f !== null) {
                            f.remove();
                        }
                    }
                }



                // for (let i = 0; i < videos_list.length; i++) {
                //     const e = videos_list[i];
                //     console.log(e.getAttribute('id'));
                // }
            });

            socket.emit('get-peers', {
                link
            });
        }
    </script>
    <!-- MDB -->
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/4.1.0/mdb.min.js"></script>
</body>

</html>